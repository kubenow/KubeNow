---
- name: create gluster kubenow yaml directory
  become: yes
  file:
    path: /etc/glusterfs/kubernetes
    state: directory
    mode: 0755

- name: copy gluster DaemonSet configuration
  become: yes
  copy:
    src: glusterfs-daemonset.yml
    dest: "/etc/glusterfs/kubernetes/glusterfs-daemonset.yml"

- name: start gluster DaemonSet
  command: >
    kubectl apply -f
    /etc/glusterfs/kubernetes/glusterfs-daemonset.yml

# those below is not really needed - just for verifying everything is OK

- name: wait for gluster DaemonSet to be Running
  command: >
    kubectl get pods 
    -o jsonpath='{.items[?(@.spec.containers[*].name=="glusterfs")].status.phase}'
  register: get_phase
  until: get_phase.stdout | match('^(Running\s)*Running$')
  # Wait for 10 minutes
  retries: 120
  delay: 5

- name: wait for gluster DaemonSet to be Ready
  command: >
    kubectl get pods
    -o jsonpath='{.items[?(@.spec.containers[*].name=="glusterfs")].status.containerStatuses[*].ready}'
  register: get_is_ready
  until: get_is_ready.stdout | match( '^(true\s)*true$' )
  # Wait for 10 minutes
  retries: 120
  delay: 5

# even less needed

- name: retrieve gluster-server IPs
  command: >
    kubectl get pods 
    -o jsonpath='{.items[?(@.spec.containers[*].name=="glusterfs")].status.podIP}'
  register: get_ips

- set_fact:
    enpoint_list: "[\"{{get_ips.stdout | replace(' ','\",\"')}}\"]"

- name: retrieve gluster-server pod name
  shell: >
    kubectl get pods
    -o jsonpath='{.items[?(@.spec.containers[*].name=="glusterfs")].metadata.name}' |
    awk '{print $1;}' | tr -d '\n'
  register: get_name

- name: "gluster peer probe (gluster_side)"
  command: >
    kubectl exec {{get_name.stdout}}
    gluster peer probe {{item}}
  register: probe_command
  until: probe_command.rc == 0
  # Try for 10 minutes
  retries: 120
  delay: 5
  # Probe each endpoint
  with_items: "{{enpoint_list}}"
  tags:
    - gluster_side
