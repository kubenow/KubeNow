language: python # (Ansible)

sudo: required

services:
  - docker

branches:
  except:
    - /^experimental\/.*$/
    - /^exp\/.*$/
    - /^development\/.*$/
    - /^dev\/.*$/
    - /^testing\/.*$/
    - /^test\/.*$/
    - /^doc\/.*$/
    - /^docs\/.*$/
    - /^documentation\/.*$/

env:
  global:
    - TERRAFORM_VERSION=0.9.4
    - ANSIBLE_LINT_VERSION=3.4.15
  matrix:
    - HOST_CLOUD=openstack
    - HOST_CLOUD=gce
    - HOST_CLOUD=aws

addons:
  apt:
    sources:
      - debian-sid
    packages:
      - shellcheck # code review tool

before_install:

  # Install code review tools
  # Install Terraform
  - >
      travis_retry curl
      "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
      > /tmp/terraform.zip
  - sudo unzip /tmp/terraform.zip -d /usr/bin
  - sudo chmod +x /usr/bin/terraform
  # Install pip deps
  - sudo pip install --upgrade pip
  - sudo pip install ansible-lint=="${ANSIBLE_LINT_VERSION}"
  # Pull hadolint
  - docker pull lukasmartinelli/hadolint

  # Check code quality
  # check Terraform
  - terraform fmt common/cloudflare
  - terraform fmt common/inventory
  - terraform fmt "$HOST_CLOUD"
  - git diff --exit-code # this will fail if terraform changed something
  # check Ansible
  # skip ANSIBLE0006: avoid using curl
  # skip ANSIBLE0012: missing change_when on command/shell etc.
  - ansible-lint -x ANSIBLE0006,ANSIBLE0012 playbooks/*.yml
  # check Shell
  - shellcheck $(find . -type f -name "*.sh")
  - shellcheck bin/*
  # check Dockerfile
  - docker run --rm -i lukasmartinelli/hadolint < Dockerfile

# Build Docker image
install: docker build -t kubenow/provisioners:latest .

before_script:

  # Init test deployment
  - bin/kn init test-deployment
  - cd test-deployment

  # RENDER CONFIGURATION
  # Create terraform.tfvars
  - >
      if [ "$HOST_CLOUD" = 'openstack' ]; then
        cp terraform.tfvars.os-template terraform.tfvars
      else
        cp "terraform.tfvars.${HOST_CLOUD}-template" terraform.tfvars
      fi
  # Common
  - sed -i -e "s/your-cluster-prefix/kubenow-ci-${TRAVIS_BUILD_NUMBER}-${HOST_CLOUD}/g" terraform.tfvars
  # AWS
  - sed -i -e "s/your-acces-key-id/${AWS_ACCESS_KEY_ID}/g" terraform.tfvars
  - sed -i -e "s#your-secret-access-key#${AWS_SECRET_ACCESS_KEY}#g" terraform.tfvars
  # GCE
  - printf '%s\n' "$GCE_CREDENTIALS" > "./service-account.json"
  - sed -i -e "s/your_project_id/${GCE_PROJECT_ID}/g" terraform.tfvars
  # OS
  - sed -i -e "s/your-pool-name/${OS_POOL_NAME}/g" terraform.tfvars
  - sed -i -e "s/external-net-uuid/${OS_EXTERNAL_NET_UUID}/g" terraform.tfvars
  - sed -i -e "s/your-master-flavor/${OS_MASTER_FLAVOR}/g" terraform.tfvars
  - sed -i -e "s/your-node-flavor/${OS_NODE_FLAVOR}/g" terraform.tfvars
  - sed -i -e "s/your-edge-flavor/${OS_EDGE_FLAVOR}/g" terraform.tfvars
  - sed -i -e "s/your-glusternode-flavor/${OS_NODE_FLAVOR}/g" terraform.tfvars
  # Enable edges (if anything but OpenStack, since floating ip is very scarce on SNIC)
  - >
      if [[ "$HOST_CLOUD" != 'openstack' ]]; then
        sed -i -e "s/# edge/edge/g" terraform.tfvars
      fi
  # Enable glusternodes
  - sed -i -e "s/# glusternode/glusternode/g" terraform.tfvars
  # Cloudflare
  - sed -i -e "s/# use_cloudflare/use_cloudflare/g" terraform.tfvars
  - sed -i -e "s/# cloudflare_email = \"your-cloudflare-email\"/cloudflare_email = \"${CI_CLOUDFLARE_EMAIL}\"/g" terraform.tfvars
  - sed -i -e "s/# cloudflare_token = \"your-cloudflare-token\"/cloudflare_token = \"${CI_CLOUDFLARE_TOKEN}\"/g" terraform.tfvars
  - sed -i -e "s/# cloudflare_domain = \"your-domain-name\"/cloudflare_domain = \"${CI_CLOUDFLARE_DOMAIN}\"/g" terraform.tfvars


script:
  # Deploy
  - travis_retry ../bin/kn apply "$HOST_CLOUD"
  # Test
  - ../bin/kn ansible-playbook playbooks/infra-test.yml
  - ../bin/kn kubectl get nodes # try to list nodes
  - ../bin/kn helm list # try to helm list
  - ../bin/kn openstack --version # try to run an openstack command

after_script:
  - export TERRAFORM_OPT="-force" && travis_retry ../bin/kn destroy "$HOST_CLOUD"
  - travis_retry terraform destroy -force "$HOST_CLOUD" # in case there is some problem with kn

jobs:
  include:
    # Docker push stage
    - stage: Push container
      before_install: true
      install: true
      before_script: true
      after_script: true
      script:
        # Build and push Docker image (needs to be build again in this stage)
        - docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
        - >
            if [ $TRAVIS_BRANCH == 'master' ]; then
              docker build -t kubenow/provisioners:master .
              docker push kubenow/provisioners:master
            elif [ ! -z $TRAVIS_TAG ]; then
              docker build -t kubenow/provisioners:$TRAVIS_TAG \
                -t kubenow/provisioners:latest .
              docker push kubenow/provisioners:$TRAVIS_TAG
              docker push kubenow/provisioners:latest
            fi
